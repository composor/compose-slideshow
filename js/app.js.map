{"version":3,"file":"app.js","sources":["../node_modules/composi/lib/h.js","../node_modules/composi/lib/patch.js","../dev/components/slideshow.js","../node_modules/composi/lib/mixin.js","../node_modules/composi/lib/component.js","../dev/app.js"],"sourcesContent":["/**\n * Hyperscript function. Enables definition of HTML/SVG using functions.\n * @param {string} type The name of the HTML or SVG tag to create.\n * @param {object} props And object of property/value pairs.\n * @param {string, number, boolean, any[]} children Any child elements.\n */\nexport function h(type, props, ...args) {\n  let node\n  const children = []\n\n  // Go thru args from front to back.\n  while (args.length) {\n    // If child is array, process.\n    if (Array.isArray((node = args.shift()))) {\n      node.map(item => args.push(item))\n    // Else check if child is string or number.\n    } else if (node != null && typeof node !== 'boolean') {\n      typeof node === \"number\" ? node = node + '' : node\n      children.push(node)\n    }\n  }\n  \n  return typeof type === \"string\" \n    ? {type, props: props || {}, children } \n    : type(props || {}, children)\n}\n","/**\n * A function to merge two objects together. The properties of the second object will overwrite any matching properties in the first object.\n * @param {Object} obj1 The first object to merge.\n * @param {Object} obj2 The second object to merge.\n */\nfunction mixin(obj1, obj2) {\n  const result = {}\n  for (let i in obj1) {\n    result[i] = obj1[i]\n  }\n  for (let i in obj2) {\n    result[i] = obj2[i]\n  }\n  return result\n}\n\n/**\n * @constructor \n * @param {node} oldNode Original node or null.\n * @param {node} node New node.\n * @param {node} element The component root element.\n * @param {node} container The container element in which component is rendered.\n */\nexport function patch(oldNode, node, element, container) {\n  return diffAndPatch(container || document.body, element, oldNode, node)\n}\n\n/**\n * Patch functions:\n * setProps \n * createNode\n * createElement\n * getKey\n * updateElement\n * removeElement\n * diffAndPatch\n */\n\n/**\n * Function to set properties and attributes on element.\n * @param {node} element \n * @param {string} name \n * @param {string|number|boolean} value \n * @param {string|number|boolean} oldValue \n */\nfunction setProps(element, name, value, oldValue) {\n  if (name === 'key') {\n  } else if (name === 'style') {\n    for (let name in mixin(oldValue, (value = value || {}))) {\n      element.style[name] = String(value[name]) || ''\n    }\n  } else {\n    try {\n      if (value === 0) value = String(value)\n      element[name] = value\n    } catch (err) {}\n\n    if (typeof value !== 'function') {\n      if (!!value) {\n        // Support SVG 'xlink:href' property:\n        if (name === 'xlink-href') {\n          element.setAttributeNS('http://www.w3.org/1999/xlink', 'href', value)\n          element.setAttribute('href', value)\n        } else {\n          element.setAttribute(name, value)\n        }\n      } else {\n        element.removeAttribute(name)\n      }\n    }\n  }\n}\n\n/**\n * Function to create an HTML or SVG node.\n * @param {node} node node A node to create.\n * @param {svg} svg Whether the node is SVG or not.\n */\nfunction createNode(node, svg) {\n  const element = (svg = svg || node.type === \"svg\")\n  ? document.createElementNS(\"http://www.w3.org/2000/svg\", node.type)\n  : document.createElement(node.type)\n\n  Object.keys(node.props).forEach(key => setProps(element, key, node.props[key]))\n  node.children.map(child => element.appendChild(createElement(child, svg)))\n  return element\n}\n\n/**\n * Function to convert hyperscript/JSX into DOM nodes.\n * @param {jsx|hyperscript} node A node to create.\n * @param {svg} svg Whether the node is SVG or not.\n */\nfunction createElement(node, svg) {\n  return typeof node === \"string\" ? document.createTextNode(node) : createNode(node, svg)\n}\n\n/**\n * Function to get a node's key.\n * @param {node} node \n */\nfunction getKey(node) {\n  if (node && node.props) {\n    return node.props.key\n  }\n}\n\n/**\n * Update an element with new values for properties and/or children.\n * @param {Element} element \n * @param {node} oldProps \n * @param {object} props \n */\nfunction updateElement(element, oldProps, props) {\n  Object.keys(mixin(oldProps, props)).forEach(key => {\n    let value = props[key]\n    let oldValue = key === \"value\" || key === \"checked\" ? element[key] : oldProps[key]\n\n    if (value !== oldValue) setProps(element, key, value, oldValue)\n  })\n}\n\n/**\n * Function to remove element from DOM.\n * @param {node} container The container of the element to remove.\n * @param {node} element The element to remove.\n */\nconst removeElement = (container, element) => container.removeChild(element)\n\n/**\n * Function to patch DOM. Diffs virtual nodes, then patches the DOM.\n * @param {node} container \n * @param {node} element \n * @param {node} oldNode \n * @param {node} node \n * @param {boolean} svg \n * @param {node} nextSibling \n */\nfunction diffAndPatch(container, element, oldNode, node, svg, nextSibling) {\n  // There is no oldNode, so this is first render.\n  if (oldNode == null) {\n    element = container.insertBefore(createElement(node, svg), element)\n  // There's an oldNode, so patch.\n  } else if (node.type != null && node.type === oldNode.type) {\n    updateElement(element, oldNode.props, node.props)\n\n    svg = svg || node.type === \"svg\"\n    const len = node.children.length\n    let oldLen = oldNode.children.length\n    let oldKeyed = {}\n    let oldElements = []\n    let keyed = {}\n\n    let k = 0\n    while (k < oldLen) {\n      let oldElement = (oldElements[k] = element.childNodes[k])\n      let oldChild = oldNode.children[k]\n      let oldKey = getKey(oldChild)\n      if (null != oldKey) oldKeyed[oldKey] = [oldElement, oldChild]\n      k++\n    }\n\n    let i = 0, j = 0\n    while (j < len) {\n      let oldElement = oldElements[i]\n      let oldChild = oldNode.children[i]\n      let newChild = node.children[j]\n      let oldKey = getKey(oldChild)\n      if (keyed[oldKey]) {\n        i++\n        continue\n      }\n      \n      let newKey = getKey(newChild)\n      let keyedNode = oldKeyed[newKey] || []\n      if (null == newKey) {\n        if (null == oldKey) {\n          diffAndPatch(element, oldElement, oldChild, newChild, svg)\n          j++\n        }\n        i++\n      } else {\n        oldKey === newKey ? diffAndPatch(element, keyedNode[0], keyedNode[1], newChild, svg) && i++ :\n        keyedNode[0] ? element.insertBefore(keyedNode[0], oldElement) && diffAndPatch(element, keyedNode[0], keyedNode[1], newChild, svg) : diffAndPatch(element, oldElement, null, newChild, svg)\n        \n        keyed[newKey] = newChild\n        j++\n      }\n    }\n\n    while (i < oldLen) {\n      let oldChild = oldNode.children[i]\n      let oldKey = getKey(oldChild)\n      if (null == oldKey) removeElement(element, oldElements[i])\n      i++\n    }\n\n    Object.keys(oldKeyed).forEach(key => {\n      let keyedNode = oldKeyed[key]\n      let reusableNode = keyedNode[1]\n      if (!keyed[reusableNode.props.key]) {\n        removeElement(element, keyedNode[0])\n      }\n    })\n  } else if (element && node !== element.nodeValue) {\n    if (typeof node === \"string\" && typeof oldNode === \"string\") {\n      element.nodeValue = node\n    } else {\n      element = container.insertBefore(\n        createElement(node, svg),\n        (nextSibling = element)\n      )\n      removeElement(container, nextSibling, oldNode.data)\n    }\n  }\n  return element\n}\n","import {h, Component} from 'composi'\n  \nconst pics = []\nfor (let i = 17; i !=0; i--) {\n  pics.push(`/pics/IMG_${i}.jpg`)\n}\n\nfunction Slide({img, idx, count}) {\n  return (\n    <div  class={`slide ${count == idx + 1 ? 'active' : ''}`} style={{backgroundImage: `url(${img})`}}></div>\n  )\n}\n\nexport class SlideShow extends Component {\n  constructor(props) {\n    super(props)\n    this.container = 'section'\n    this.state = {\n      count: 1,\n      pics: pics\n    }\n  }\n  render(state) {\n    // console.log(state.pics)\n    return (\n      <div class='slide-show'>\n        {\n          state.pics.map((img, idx) => <Slide {...{count: this.state.count, idx, img}} />)\n        }\n      </div>\n    )\n  }\n  tick() {\n    let count = parseInt(this.state.count)\n    count += 1\n    if (count > 17) count = 1\n    this.setState({count})\n  }\n  componentDidMount() {\n    setInterval(() => {\n      this.tick()\n    }, 5000)\n  }\n}\n\n// https://s3-us-west-2.amazonaws.com/s.cdpn.io/77047/IMG_17.jpg\n// https://s3-us-west-2.amazonaws.com/s.cdpn.io/77047/IMG_10.jpg\n// https://s3-us-west-2.amazonaws.com/s.cdpn.io/77047/IMG_4.jpg","/**\n * A mixin function used for updating component state.\n * @param {object} obj1 An object as the target.\n * @param {object} obj2 An object of properties to target.\n */\nexport const mixin = (obj1, obj2) => {\n  Object.keys(obj2).forEach(p => {\n    if (obj2.hasOwnProperty(p)) {\n      Object.defineProperty(obj1, p, {\n        value: obj2[p],\n        writable: true,\n        enumerable: false,\n        configurable: true\n      })\n    }\n  })\n}\n","import {h} from './h'\nimport {patch} from './patch'\nimport {mixin} from './mixin'\n\nvar rAF = window.requestAnimationFrame\n  || window.webkitRequestAnimationFrame\n  || window.mozRequestAnimationFrame\n  || window.msRequestAnimationFrame\n  || function(cb) { return setTimeout(cb, 16) }\n\n/**\n * @type {object} dataStore A pseudo-private property using Date object to store the component's state.\n */\nconst dataStore = new Date().getTime()\n\n/**\n * @class Class to create a component\n */\nexport class Component {\n  /**\n   * Constructor for Component class.\n   * @typedef {object} props An object of property/values to configure the class instance.\n   * @property {string|element} props.container The container element in which to render the component.\n   * @property {state} [props.state] The state object of the component. This can be of type boolean, string, number, object or array.\n   * @property {function} props.render A function that returns nodes to render to the DOM.\n   */\n  constructor(props) {\n    /** @type {props} */\n    if (!props) props = {}\n    this.selector = props.container || props.root ||  'body'\n    \n    if (props.render) {\n      this.render = props.render\n    }\n    \n    if (props.state) {\n      this.state = props.state\n    }\n\n    this.oldNode = null\n    if (this.selector) {\n      this.container = document.querySelector(this.selector)\n    }\n    this.componentShouldUpdate = true\n    \n    this.mounted = false\n    this.element\n    \n    /**\n     * Handle lifecycle methods.\n     */\n    if (props.beforeCreateComponent) {\n      this.beforeCreateComponent = props.beforeCreateComponent\n    }\n    // Alias for React lifecycle hook:\n    if (props.componentWillMount || this.componentWillMount) {\n      this.beforeCreateComponent = props.componentWillMount || this.componentWillMount\n    }\n    if (props.componentWasCreated) {\n      this.componentWasCreated = props.componentWasCreated\n    }\n    // Alias for React lifecycle hook:\n    if (props.componentDidMount || this.componentDidMount) {\n      this.componentWasCreated = props.componentDidMount || this.componentDidMount\n    }\n    if (props.componentWillUpdate) {\n      this.componentWillUpdate = props.componentWillUpdate\n    }\n    if (props.componentDidUpdate) {\n      this.componentDidUpdate = props.componentDidUpdate\n    }\n    if (props.componentWillUnmount) {\n      this.componentWillUnmount = props.componentWillUnmount\n    }\n  }\n\n  /**\n   * Define getters and setters for state.\n   */\n  set state(data) {\n    this[dataStore] = data\n    rAF(() => this.update())\n  }\n\n  get state() {\n    return this[dataStore]\n  }\n  \n  /**\n   * Method to set a component's state.\n   * @param {string|number|boolean|object|array} data The data to set.\n   * @param {number} [position] The index of an array whose data you want to set.\n   */\n  setState(data, position) {\n    if (typeof data === 'function') {\n      const state = data.call(this, this.state)\n      if (typeof state !== 'function' && !!state) this.setState(state)\n    }\n    if (Array.isArray(this.state)) {\n      const state = this.state\n      if (position || position === 0) {\n        if (typeof state[position] === 'object') {\n          mixin(state[position], data)\n          this.state = state\n        } else {\n          state[position] = data\n          this.state = state\n        }\n      } else {\n        this.state = state\n      }\n    } else if (typeof this.state === 'object') {\n      const state = this.state\n      mixin(state, data)\n      this.state = state\n    } else {\n      this.state = data\n    }\n  }\n\n  /**\n   * Function to render component after data changes.\n   * If data is passed as argument, it will be used.\n   * Otherwise state will be used.\n   * @param {boolean|number|string|object|array} [data ]\n   * @returns void\n   */\n  update(data) {\n    if (!this.render) return\n\n    // If componentShouldUpdate is set to false, render one time only.\n    // All other updates will be ignored.\n    if (!this.componentShouldUpdate && this.mounted) return\n\n    // If data is 0 or non-boolean, use,\n    // else use component state.\n    let __data  = this.state\n    if (data !== true && data) __data = data\n\n    if (this.container && typeof this.container === 'string') {\n      this.selector = this.container\n      this.container = document.querySelector(this.container)\n    }\n\n    // Check if vnode already exists.\n    // Used for deciding whether to fire lifecycle events.\n    const __oldNode = this.oldNode\n    const __render = this.render\n    function testIfVNodesDiffer(data) {\n      try {\n        if (JSON.stringify(this.oldNode) === JSON.stringify(__render(data))) {\n          return false\n        } else {\n          return true\n        }\n      } catch(err) {\n        return true\n      }\n    }\n    // Create virtual dom and check if component id already exists in document.\n    const vdom = this.render(__data)\n    let elem\n    if (vdom && vdom.props && vdom.props.id) {\n      try {\n        elem = this.container.querySelector(`#${vdom.props.id}`)\n      } catch(err) {}\n    }\n\n    // If component element id already exists in DOM, \n    // remove it before rendering the component.\n    if (elem && !this.mounted) {\n      elem.parentNode.removeChild(elem)\n    }\n\n    // Patch DOM with component update.\n    this.element = patch(\n      this.oldNode,\n      (this.oldNode = this.render(__data)),\n      this.element,\n      this.container\n    )\n    if (this.mounted && this.oldNode && testIfVNodesDiffer(__data)) {\n      this.componentWillUpdate && this.componentWillUpdate(this)\n    } else {\n      this.beforeCreateComponent && this.beforeCreateComponent(this)\n      this.componentWasCreated && this.componentWasCreated(this)\n      this.mounted = true\n      return\n    }\n    this.componentDidUpdate && testIfVNodesDiffer(__data) && this.componentDidUpdate(this)\n  }\n  \n  /**\n   * Method to destroy component.\n   * First unbind events.\n   * Then remove component element from DOM.\n   * Also null out component properties.\n   * @returns void\n   */\n  unmount() {\n    const self = this\n    const eventWhitelist = ['click', 'dblclick', 'mousedown','mouseup', 'mouseover','mouseout', 'mouseover', 'mouseleave', 'select', 'input', 'change', 'keydown', 'keypress', 'keyup', 'submit']\n    if (!this.element) return\n    this.componentWillUnmount && this.componentWillUnmount(this)\n    eventWhitelist.map(event => {\n      this.element.removeEventListener(event, this)\n    })\n    this.container.removeChild(this.element)\n    this.container = undefined\n    for (let key in this) {\n      delete this[key]\n    }\n    delete this.state\n    this.update = undefined\n    this.unmount = undefined\n  }\n}\n\n// Polyfill for Element.closest:\nif (window.Element && !Element.prototype.closest) {\n  Element.prototype.closest = \n  function(s) {\n    let matches = (this.document || this.ownerDocument).querySelectorAll(s)\n    let i\n    let el = this\n    do {\n      i = matches.length\n      while (--i >= 0 && matches.item(i) !== el) {}\n    } while ((i < 0) && (el = el.parentElement))\n    return el\n  }\n}\n","import {h, Component} from 'composi'\nimport {SlideShow} from './components/slideshow'\n\nnew SlideShow()\n\n"],"names":["h","type","props","args","node","children","length","Array","isArray","shift","map","push","item","mixin","obj1","obj2","result","i","setProps","element","name","value","oldValue","style","String","err","setAttributeNS","setAttribute","removeAttribute","createElement","svg","document","createTextNode","createElementNS","keys","forEach","key","appendChild","child","createNode","getKey","diffAndPatch","container","oldNode","nextSibling","insertBefore","oldProps","len","oldLen","oldKeyed","oldElements","keyed","k","oldElement","childNodes","oldChild","oldKey","j","newChild","newKey","keyedNode","removeElement","reusableNode","nodeValue","data","Slide","img","idx","class","count","backgroundImage","removeChild","hasOwnProperty","p","defineProperty","rAF","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cb","setTimeout","dataStore","Date","getTime","Component","selector","root","render","state","this","querySelector","componentShouldUpdate","mounted","beforeCreateComponent","componentWillMount","componentWasCreated","componentDidMount","componentWillUpdate","componentDidUpdate","componentWillUnmount","position","call","setState","babelHelpers.typeof","testIfVNodesDiffer","JSON","stringify","__render","__data","vdom","elem","id","parentNode","body","patch","removeEventListener","event","undefined","update","unmount","_this2","Element","prototype","closest","s","matches","ownerDocument","querySelectorAll","el","parentElement","pics","parseInt","tick"],"mappings":"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"}